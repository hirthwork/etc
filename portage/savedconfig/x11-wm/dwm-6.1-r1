/* See LICENSE file for copyright and license details. */

/* appearance */
#define FONT "Misc Fixed:size=12"
#define NORMBGCOLOR "#444444"
#define NORMFGCOLOR "#888888"
#define SELFGCOLOR "#cccccc"
static const char *fonts[] = {
	FONT
};
static const char dmenufont[]       = FONT;
static const char normbordercolor[] = NORMBGCOLOR;
static const char normbgcolor[]     = NORMBGCOLOR;
static const char normfgcolor[]     = NORMFGCOLOR;
static const char selbordercolor[]  = NORMBGCOLOR;
static const char selbgcolor[]      = NORMBGCOLOR;
static const char selfgcolor[]      = SELFGCOLOR;
static const unsigned int borderpx  = 0;	/* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayspacing = 0;   /* systray spacing */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, 0: display systray on the last monitor*/
static const int showsystray        = 1;        /* 0 means no systray */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const double shade           = 0.75;     /* opacity of unfocussed clients */

/* tagging */
#define MAX_TAGLEN 256
static char tags[][MAX_TAGLEN] = { "1✉", "2🌎", "3🖳","4🖳", "5🖳", "6🖳", "7🖌", "8🗎", "9⎁" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor    opacity */
        { "mpv",      NULL,       NULL,       0,            True,        -1,        -1 },
        { "feh",      NULL,       NULL,       0,            True,        -1,        -1 },
        { "UXTerm",   NULL,       NULL,       0,            False,       -1,        .9 },
        { "Pale moon",NULL,       NULL,       1 << 1,       False,       -1,        -1 },
        { "Yandex-browser-beta",NULL,NULL,    1 << 1,       False,       -1,        -1 },
        { "Dia",      NULL,       NULL,       1 << 6,       True,        -1,        -1 },
        { "Gimp",     NULL,       NULL,       1 << 6,       False,       -1,        -1 },
        { "Abiword",  NULL,       NULL,       1 << 7,       False,       -1,        -1 },
        { "MuPDF",    NULL,       NULL,       1 << 7,       False,       -1,        -1 },
        { "Evince",   NULL,       NULL,       1 << 7,       False,       -1,        -1 },
        { "Gnumeric", NULL,       NULL,       1 << 7,       False,       -1,        -1 },
        { "Telegram", NULL,       NULL,       1 << 8,       False,       -1,        -1 },
};

/* layout(s) */
static const float mfact     = 0.5; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = True;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "",      tile },    /* first entry is default */
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]  = { "uxterm", "-fn", "-misc-fixed-medium-r-normal--15-140-75-75-c-90-iso10646-1", "-fb", "-misc-fixed-bold-r-normal--15-140-75-75-c-90-iso10646-1", "+sb", "-bg", normbgcolor, "-fg", selfgcolor, "-cr", "white", "-bc", "-uc", "-b", "0", NULL };
static const char *scrotcmd[]  = { "scrot", "/tmp/%Y%m%d-%H%M%S.png", NULL };
static const char *lockcmd[]  = { "sh", "-c", "$HOME/lock", NULL };

static void nametag(const Arg *arg);
static void nexttag(const Arg *arg);
static void prevtag(const Arg *arg);

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_r,      spawn,          {.v = dmenucmd } },
	{ MODKEY,                       XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_s,      spawn,          {.v = scrotcmd } },
	{ MODKEY|ShiftMask,             XK_l,      spawn,          {.v = lockcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,             XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_n,      nametag,        {0} },
	{ MODKEY,                       XK_n,      nexttag,        {0} },
	{ MODKEY,                       XK_p,      prevtag,        {0} },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

void nametag(const Arg *arg) {
        char *cp, name[MAX_TAGLEN - 1];
        FILE *fp;
        int i;

        if(!(fp = popen("echo -n | dmenu -fn '" FONT "' -nb '" NORMBGCOLOR "' -nf '" NORMFGCOLOR "' -sb '" NORMBGCOLOR "' -sf '" SELFGCOLOR "'", "r")))
                fprintf(stderr, "dwm: Could not popen 'echo -n | dmenu'\n");
        cp = fgets(name, MAX_TAGLEN - 1, fp);
        pclose(fp);
        if(cp == NULL)
                return;

        cp = strchr(name, '\n');
        if (cp)
                *cp = '\0';

        for(i = 0; i < LENGTH(tags); i++)
                if(selmon->tagset[selmon->seltags] & (1 << i))
                {
                        strcpy(tags[i] + 1, name);
                }
        drawbars();
}

void nexttag(const Arg* arg) {
        if((1 << (LENGTH(tags) - 1)) & selmon->tagset[selmon->seltags])
                return;
        selmon->tagset[selmon->seltags] <<= 1;
        arrange(selmon);
}

void prevtag(const Arg* arg) {
        if(1 & selmon->tagset[selmon->seltags])
                return;
        selmon->tagset[selmon->seltags] >>= 1;
        arrange(selmon);
}

