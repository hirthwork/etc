/* See LICENSE file for copyright and license details. */

/* appearance */
#define FONT "-misc-fixed-medium-r-semicondensed--12-110-75-75-c-60-*-*"
#define NORMBGCOLOR "#000000"
#define NORMFGCOLOR "#555555"
#define SELFGCOLOR "#aaaaaa"
static const char font[]            = FONT;
static const char normbordercolor[] = NORMBGCOLOR;
static const char normbgcolor[]     = NORMBGCOLOR;
static const char normfgcolor[]     = NORMFGCOLOR;
static const char selbordercolor[]  = NORMBGCOLOR;
static const char selbgcolor[]      = NORMBGCOLOR;
static const char selfgcolor[]      = SELFGCOLOR;
static const unsigned int borderpx  = 0;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const Bool showbar           = True;     /* False means no bar */
static const Bool topbar            = True;     /* False means bottom bar */

/* tagging */
#define MAX_TAGLEN 256
static char tags[][MAX_TAGLEN] = { "1:mail", "2:www", "3:tty","4:tty", "5:tty", "6:tty", "7:draw", "8:p2p", "9:doc" };

static const Rule rules[] = {
        /* class      instance    title       tags mask     isfloating   monitor */
        { "MPlayer",  NULL,       NULL,       0,            True,        -1 },
        { "Skype",    NULL,       NULL,       1 << 0,       False,       -1 },
        { "Pidgin",   NULL,       NULL,       1 << 0,       False,       -1 },
        { "Firefox",  NULL,       NULL,       1 << 1,       False,       -1 },
        { "luakit",   NULL,       NULL,       1 << 1,       False,       -1 },
        { "Dia",      NULL,       NULL,       1 << 6,       True,        -1 },
        { "Gimp",     NULL,       NULL,       1 << 6,       True,        -1 },
        { "Transmission", NULL,   NULL,       1 << 7,       False,       -1 },
        { "Evince",   NULL,       NULL,       1 << 8,       False,       -1 },
        { "Djview",   NULL,       NULL,       1 << 8,       False,       -1 },
        { "Abiword",  NULL,       NULL,       1 << 8,       False,       -1 },
        { "Gnumeric", NULL,       NULL,       1 << 8,       False,       -1 },
        { "Apvlv",    NULL,       NULL,       1 << 8,       False,       -1 },
        { "mupdf",    NULL,       NULL,       1 << 8,       False,       -1 },
        { "xchm",     NULL,       NULL,       1 << 8,       False,       -1 },
        { "Xchm",     NULL,       NULL,       1 << 8,       False,       -1 },
        { "trayer",   NULL,       NULL,       ~0,           False,       -1 },
};

/* layout(s) */
static const float mfact      = 0.5; /* factor of master area size [0.05..0.95] */
static const int nmaster      = 1;    /* number of clients in master area */
static const Bool resizehints = True; /* True means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "",      tile },    /* first entry is default */
	{ "",      NULL },    /* no layout function means floating behavior */
	{ "",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *gmruncmd[] = { "gmrun", "-g", "+0+0", NULL };
static const char *termcmd[]  = { "/usr/bin/st", NULL };
static const char *scrotcmd[]  = { "/usr/bin/scrot", "/tmp/%Y%m%d-%H%M%S.png", NULL };

static void nametag(const Arg *arg);
static void nexttag(const Arg *arg);
static void prevtag(const Arg *arg);

static Key keys[] = {
	/* modifier                     key        function        argument */
        { MODKEY,                       XK_r,      spawn,          {.v = gmruncmd } },
        { MODKEY,                       XK_Return, spawn,          {.v = termcmd } },
        { MODKEY,                       XK_s,      spawn,          {.v = scrotcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
        { MODKEY|ShiftMask,             XK_n,      nametag,        {0} },
        { MODKEY,                       XK_n,      nexttag,        {0} },
        { MODKEY,                       XK_p,      prevtag,        {0} },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

void nametag(const Arg *arg) {
        char command[sizeof(tags) + 256] = "echo '";
        char *cp, name[MAX_TAGLEN - 2];
        FILE *fp;
        int i;
        for (i = 0; i < sizeof(tags) / sizeof(tags[0]); ++i) {
                if (i)
                        strcat(command, "\n");
                strcat(command, tags[i] + 2);
        }
        strcat(command, "' | dmenu -fn '" FONT "' -nb '" NORMBGCOLOR "' -nf '" NORMFGCOLOR "' -sb '" NORMBGCOLOR "' -sf '" SELFGCOLOR "'");

        if(!(fp = (FILE*)popen(command, "r")))
                fprintf(stderr, "dwm: Could not popen  '%s'\n", command);
        cp = fgets(name, MAX_TAGLEN - 2, fp);
        pclose(fp);
        if(cp == NULL)
                return;

        cp = strchr(name, '\n');
        if (cp)
                *cp = '\0';

        for(i = 0; i < LENGTH(tags); i++)
                if(selmon->tagset[selmon->seltags] & (1 << i))
                {
                        strcpy(tags[i] + 2, name);
                }
        drawbars();
}

void nexttag(const Arg* arg) {
        if((1 << (LENGTH(tags) - 1)) & selmon->tagset[selmon->seltags])
                return;
        selmon->tagset[selmon->seltags] <<= 1;
        arrange(selmon);
}

void prevtag(const Arg* arg) {
        if(1 & selmon->tagset[selmon->seltags])
                return;
        selmon->tagset[selmon->seltags] >>= 1;
        arrange(selmon);
}

#undef ISVISIBLE
#define ISVISIBLE(C) ((C->tags & C->mon->tagset[C->mon->seltags]) && (strcmp("panel", C->name) == 0 && C->mon == selmon && C == selmon->sel ? (c->neverfocus = True, selmon->sel = C->next, True) : True))

