/* See LICENSE file for copyright and license details. */

/* appearance */
#define FONT "-*-terminus-medium-r-normal-*-14-*-*-*-*-*-*-*"
#define NORMBGCOLOR "#222222"
#define NORMFGCOLOR "#8a8a8a"
#define SELFGCOLOR "#bebebe"
static const char font[]            = FONT;
static const char normbordercolor[] = "#222222";
static const char normbgcolor[]     = NORMBGCOLOR;
static const char normfgcolor[]     = NORMFGCOLOR;
static const char selbordercolor[]  = "#222222";
static const char selbgcolor[]      = NORMBGCOLOR;
static const char selfgcolor[]      = SELFGCOLOR;
static const unsigned int borderpx  = 0;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const Bool showbar           = True;     /* False means no bar */
static const Bool topbar            = True;     /* False means bottom bar */

/* tagging */
#define MAX_TAGLEN 256
static char tags[][MAX_TAGLEN] = { "1:mail", "2:www", "3:tty","4:tty", "5:tty", "6:tty", "7:draw", "8:p2p", "9:doc" };

static const Rule rules[] = {
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "MPlayer",  NULL,       NULL,       0,            True,        -1 },
	{ "Skype",    NULL,       NULL,       1 << 0,       False,       -1 },
	{ "Pidgin",   NULL,       NULL,       1 << 0,       False,       -1 },
	{ "Firefox",  NULL,       NULL,       1 << 1,       False,       -1 },
	{ "luakit",   NULL,       NULL,       1 << 1,       False,       -1 },
	{ "Dia",      NULL,       NULL,       1 << 6,       True,        -1 },
	{ "Gimp",     NULL,       NULL,       1 << 6,       True,        -1 },
	{ "Transmission", NULL,   NULL,       1 << 7,       False,       -1 },
	{ "Evince",   NULL,       NULL,       1 << 8,       False,       -1 },
	{ "Djview",   NULL,       NULL,       1 << 8,       False,       -1 },
	{ "Abiword",  NULL,       NULL,       1 << 8,       False,       -1 },
	{ "Gnumeric", NULL,       NULL,       1 << 8,       False,       -1 },
	{ "Apvlv",    NULL,       NULL,       1 << 8,       False,       -1 },
	{ "mupdf",    NULL,       NULL,       1 << 8,       False,       -1 },
	{ "xchm",     NULL,       NULL,       1 << 8,       False,       -1 },
	{ "Xchm",     NULL,       NULL,       1 << 8,       False,       -1 },
	{ "trayer",   NULL,       NULL,       ~0,           False,       -1 },
};

/* layout(s) */
static const float mfact      = 0.5; /* factor of master area size [0.05..0.95] */
static const Bool resizehints = True; /* True means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "",      tile },    /* first entry is default */
	{ "",      NULL },    /* no layout function means floating behavior */
	{ "",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* commands */
static const char *gmruncmd[] = { "gmrun", "-g", "+0+0", NULL };
static const char *termcmd[]  = { "/usr/bin/urxvt", "+sb", "-fn", "xft:Terminus,xft:Fixed", "--background", normbgcolor, "--foreground", selfgcolor, "-cr", "white", "-b", "0", "-bc", "-uc", "--color0", normbgcolor, "--color1", "#702222", "--color2", "#227022", "--color3", "#707022", "--color4", "#222270", "--color5", "#702270", "--color6", "#227070", "--color7", normfgcolor, "--color8", "#565656", "--color9", "#be2222", "--color10", "#22be22", "--color11", "#bebe22", "--color12", "#2222be", "--color13", "#be22be", "--color14", "#22bebe", "--color15", selfgcolor, NULL };
static const char *scrotcmd[]  = { "/usr/bin/scrot", "/tmp/%Y%m%d-%H%M%S.png", NULL };

static void nametag(const Arg *arg);

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_r,      spawn,          {.v = gmruncmd } },
	{ MODKEY,                       XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_s,      spawn,          {.v = scrotcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,             XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	{ MODKEY,                       XK_n,      nametag,        {0} },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

void nametag(const Arg *arg) {
	char *cp, name[MAX_TAGLEN];
	FILE *fp;
	int i;

	if(!(fp = (FILE*)popen("echo -n | dmenu -fn '" FONT "' -nb '" NORMBGCOLOR "' -nf '" NORMFGCOLOR "' -sb '" NORMBGCOLOR "' -sf '" SELFGCOLOR "'", "r")))
		fprintf(stderr, "dwm: Could not popen 'echo -n | dmenu'\n");
	cp = fgets(name, MAX_TAGLEN, fp);
	pclose(fp);
	if(cp == NULL)
		return;

	for(i = 0; i < LENGTH(tags); i++)
		if(selmon->tagset[selmon->seltags] & (1 << i))
		{
			memcpy(tags[i] + 2, name, MAX_TAGLEN - 2);
			tags[i][MAX_TAGLEN - 1] = 0;
		}
	drawbars();
}

#undef ISVISIBLE
#define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]) && (strcmp("panel", C->name) == 0 && C->mon == selmon && C == selmon->sel ? (selmon->sel = C->next, True) : True))

